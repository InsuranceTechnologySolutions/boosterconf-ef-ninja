// <auto-generated />
using System;
using BoosterConf.Ef.Ninja.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BoosterConf.Ef.Ninja.Database.Migrations
{
    [DbContext(typeof(InsuranceDbContext))]
    [Migration("20240310143611_ClaimsTpt")]
    partial class ClaimsTpt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("insurance")
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BoosterConf.Ef.Ninja.Database.Entities.ClaimEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(14, 2)
                        .HasColumnType("decimal(14,2)");

                    b.Property<int>("CoverId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoverId");

                    b.HasIndex("StatusId");

                    b.ToTable("Claims", "insurance");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("BoosterConf.Ef.Ninja.Database.Entities.ClaimStatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("ClaimStatuses", "insurance");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "The claim has been submitted and is awaiting review.",
                            ExternalId = new Guid("d578489e-45e0-4ff8-9ef6-5b529ed5d95c"),
                            Name = "Submitted"
                        },
                        new
                        {
                            Id = 2,
                            Description = "The claim has been approved for payment.",
                            ExternalId = new Guid("17fadf76-5158-4cee-a088-281761949bdf"),
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 3,
                            Description = "The claim has been paid to the policy holder.",
                            ExternalId = new Guid("edd82f86-179a-4a41-93a7-4b204d9d1100"),
                            Name = "Paid"
                        });
                });

            modelBuilder.Entity("BoosterConf.Ef.Ninja.Database.Entities.CoverEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CoverTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Premium")
                        .HasPrecision(14, 2)
                        .HasColumnType("decimal(14,2)");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CoverTypeId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Covers", "insurance");
                });

            modelBuilder.Entity("BoosterConf.Ef.Ninja.Database.Entities.CoverTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("CoverTypes", "insurance");
                });

            modelBuilder.Entity("BoosterConf.Ef.Ninja.Database.Entities.CustomerAddressEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("CustomerAddresses", "pii");
                });

            modelBuilder.Entity("BoosterConf.Ef.Ninja.Database.Entities.CustomerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("FirstName", "LastName");

                    b.ToTable("Customers", "pii");
                });

            modelBuilder.Entity("BoosterConf.Ef.Ninja.Database.Entities.AutoClaimEntity", b =>
                {
                    b.HasBaseType("BoosterConf.Ef.Ninja.Database.Entities.ClaimEntity");

                    b.Property<string>("AccidentReport")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<decimal>("RepairEstimate")
                        .HasPrecision(14, 2)
                        .HasColumnType("decimal(14,2)");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.ToTable("AutoClaims", "insurance");
                });

            modelBuilder.Entity("BoosterConf.Ef.Ninja.Database.Entities.LifeClaimEntity", b =>
                {
                    b.HasBaseType("BoosterConf.Ef.Ninja.Database.Entities.ClaimEntity");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DeathCertificate")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("PolicyHolderName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.ToTable("LifeClaims", "insurance");
                });

            modelBuilder.Entity("BoosterConf.Ef.Ninja.Database.Entities.MiscClaimEntity", b =>
                {
                    b.HasBaseType("BoosterConf.Ef.Ninja.Database.Entities.ClaimEntity");

                    b.Property<string>("AdditionalDetails")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.ToTable("MiscClaims", "insurance");
                });

            modelBuilder.Entity("BoosterConf.Ef.Ninja.Database.Entities.ClaimEntity", b =>
                {
                    b.HasOne("BoosterConf.Ef.Ninja.Database.Entities.CoverEntity", "Cover")
                        .WithMany("Claims")
                        .HasForeignKey("CoverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoosterConf.Ef.Ninja.Database.Entities.ClaimStatusEntity", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cover");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("BoosterConf.Ef.Ninja.Database.Entities.CoverEntity", b =>
                {
                    b.HasOne("BoosterConf.Ef.Ninja.Database.Entities.CoverTypeEntity", "CoverType")
                        .WithMany()
                        .HasForeignKey("CoverTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoosterConf.Ef.Ninja.Database.Entities.CustomerEntity", "Customer")
                        .WithMany("Covers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoverType");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BoosterConf.Ef.Ninja.Database.Entities.CustomerEntity", b =>
                {
                    b.HasOne("BoosterConf.Ef.Ninja.Database.Entities.CustomerAddressEntity", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BoosterConf.Ef.Ninja.Database.Entities.AutoClaimEntity", b =>
                {
                    b.HasOne("BoosterConf.Ef.Ninja.Database.Entities.ClaimEntity", null)
                        .WithOne()
                        .HasForeignKey("BoosterConf.Ef.Ninja.Database.Entities.AutoClaimEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoosterConf.Ef.Ninja.Database.Entities.LifeClaimEntity", b =>
                {
                    b.HasOne("BoosterConf.Ef.Ninja.Database.Entities.ClaimEntity", null)
                        .WithOne()
                        .HasForeignKey("BoosterConf.Ef.Ninja.Database.Entities.LifeClaimEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoosterConf.Ef.Ninja.Database.Entities.MiscClaimEntity", b =>
                {
                    b.HasOne("BoosterConf.Ef.Ninja.Database.Entities.ClaimEntity", null)
                        .WithOne()
                        .HasForeignKey("BoosterConf.Ef.Ninja.Database.Entities.MiscClaimEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoosterConf.Ef.Ninja.Database.Entities.CoverEntity", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("BoosterConf.Ef.Ninja.Database.Entities.CustomerEntity", b =>
                {
                    b.Navigation("Covers");
                });
#pragma warning restore 612, 618
        }
    }
}
